version: '3.8'

services:
  # Backend API service
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=true
      - HOST=0.0.0.0
      - PORT=8000
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_NAME=anomaly_detection
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=mydevtoken
      - INFLUXDB_ORG=vivancedata
      - INFLUXDB_BUCKET=anomaly_detection
    depends_on:
      - timescaledb
      - kafka
      - influxdb
    networks:
      - anomaly-net

  # Frontend service
  frontend:
    build: ./frontend
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/app
    depends_on:
      - backend
    networks:
      - anomaly-net

  # TimescaleDB for time-series data storage
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=anomaly_detection
    volumes:
      - timescale-data:/var/lib/postgresql/data
    networks:
      - anomaly-net

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - anomaly-net

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    depends_on:
      - zookeeper
    networks:
      - anomaly-net

  # InfluxDB for time series data
  influxdb:
    image: influxdb:2.0
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpassword
      - DOCKER_INFLUXDB_INIT_ORG=vivancedata
      - DOCKER_INFLUXDB_INIT_BUCKET=anomaly_detection
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=mydevtoken
    volumes:
      - influx-data:/var/lib/influxdb2
    networks:
      - anomaly-net

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - influxdb
      - timescaledb
    networks:
      - anomaly-net

  # Prometheus for system metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - anomaly-net

networks:
  anomaly-net:
    driver: bridge

volumes:
  timescale-data:
  influx-data:
  grafana-data:
  prometheus-data:
